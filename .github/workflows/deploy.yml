name: deploy-frontend

on:
  push:
    branches: [main]
    paths-ignore: ['infra/**']
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install deps
        run: npm ci

      - name: Build
        run: npm run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-south-2

      # читаем outputs terraform из remote state
      - name: Terraform Init (read outputs)
        working-directory: infra
        run: |
          terraform init -reconfigure \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=inmobiliaria-admin/terraform.tfstate" \
            -backend-config="region=eu-south-2" \
            -backend-config="dynamodb_table=${{ secrets.TF_LOCK_TABLE }}" \
            -backend-config="encrypt=true"

      - name: Read TF outputs
        id: tf
        working-directory: infra
        run: |
          echo "BUCKET=$(terraform output -raw bucket_name_out)" >> $GITHUB_OUTPUT
          echo "CF_ID=$(terraform output -raw distribution_id)" >> $GITHUB_OUTPUT
          echo "CF_URL=$(terraform output -raw cloudfront_url)" >> $GITHUB_OUTPUT

      # заливаем билд (Vite/Vue по умолчанию в dist/)
      - name: Upload assets (long cache)
        run: |
          aws s3 sync dist/ s3://${{ steps.tf.outputs.BUCKET }}/ \
            --delete --exclude "index.html" \
            --cache-control "public, max-age=31536000, immutable"

      - name: Upload index.html (no-cache)
        run: |
          aws s3 cp dist/index.html s3://${{ steps.tf.outputs.BUCKET }}/ \
            --cache-control "no-cache, no-store, must-revalidate" \
            --content-type "text/html"

      - name: CloudFront invalidation
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ steps.tf.outputs.CF_ID }} \
            --paths "/*"

      - name: Deployment URL
        run: echo "Deployed to ${{ steps.tf.outputs.CF_URL }}"
