---
name: Deploy SPA

# yamllint disable-line rule:truthy
on:
  push:
    branches: ['main']

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: eu-south-2
  TF_WORKDIR: infra
  TF_IN_AUTOMATION: 'true'

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install deps & build
        run: |
          npm ci
          npm run build

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.2

      - name: Terraform version
        run: terraform version

      - name: Terraform Init
        working-directory: ${{ env.TF_WORKDIR }}
        run: terraform init -upgrade

      - name: Terraform Apply (S3+CF)
        working-directory: ${{ env.TF_WORKDIR }}
        run: terraform apply -auto-approve -lock-timeout=5m

      - name: Export Terraform outputs
        working-directory: ${{ env.TF_WORKDIR }}
        shell: bash
        run: |
          S3=$(terraform output -raw bucket_name)
          CFID=$(terraform output -raw cloudfront_distribution_id)
          CFDOM=$(terraform output -raw cloudfront_domain)
          {
            echo "S3_BUCKET=$S3"
            echo "CF_DIST_ID=$CFID"
            echo "CF_DOMAIN=$CFDOM"
          } >> "$GITHUB_ENV"

      - name: Upload static assets (long cache)
        run: |
          aws s3 sync dist/ "s3://${{ env.S3_BUCKET }}" \
            --delete \
            --exclude index.html \
            --cache-control 'public, max-age=31536000, immutable'

      - name: Upload index.html (no cache)
        run: |
          aws s3 cp dist/index.html \
            "s3://${{ env.S3_BUCKET }}/index.html" \
            --cache-control 'no-cache, no-store, must-revalidate'

      - name: Wait for CloudFront deployment
        run: |
          aws cloudfront wait distribution-deployed \
            --id "${{ env.CF_DIST_ID }}"

      - name: CloudFront invalidation
        run: |
          aws cloudfront create-invalidation \
            --distribution-id "${{ env.CF_DIST_ID }}" \
            --paths "/*"

      - name: Echo site URL
        shell: bash
        run: |
          echo "Deployed URL:"
          echo "https://${CF_DOMAIN}"
